import networkx as nx
# import matplotlib.pyplot as plt
# from scipy.stats import uniform, bernoulli
# import numpy as np
import random



def gen2dLattice(n):
    '''Create a 2n by 2n square graph'''
    return nx.grid_2d_graph(range(-n,n+1),range(-n,n+1))

def percGraph(n):
    G = gen2dLattice(n)
    num_edges = nx.number_of_edges(G)
    # unifRvs = uniform.rvs(size=num_edges) #Create Uniform Rv for each edge
    unifRvs = [random.random() for _ in range(num_edges)]
    dictUnifRvs = {coord:rv for coord,rv in zip(G.edges,iter(unifRvs))} # Dictionary from edges to their unif rv
    nx.set_edge_attributes(G,dictUnifRvs,name="unifRv") # binds the unif rvs to the edges in the graph 
    GAug = G.copy()
    GAug.add_node('s') #create aug graph with s and f nodes which connect to the left an right sides resp
    GAug.add_node('f')
    for i in range(-n,n+1):
        GAug.add_edge('s',(-n,i))
        GAug.add_edge((n,i),'f')
    return G , GAug

def find_crossing_path(openEdges,GAug) -> list:
    '''finds left/right crossing by open edges if one exists
    Returns: List of edges on the path
    ''' # find the subgraph of open edges plus the aux left right edges
    GOpen = nx.edge_subgraph(GAug,list(GAug.edges('f')) + list(GAug.edges('s')) + [(e[0],e[1]) for e in openEdges])
    edgepath = []
    try:
        openPaths = nx.algorithms.shortest_paths.bidirectional_shortest_path(GOpen,'s','f')
    except:
        openPaths = []
    for i in range(len(openPaths)): #Convert from list of nodes to list of edges
        edgepath.append((openPaths[i-1],openPaths[i]))
    openPaths = edgepath
    return openPaths

def find_threshold_binary_search(i):
    print(i)
    '''Finds the threshold for a left right crossing on a 2i x 2i box'''
    G, GAug = percGraph(i)
    lo=0
    hi=1
    p = (lo+hi)/2
    openEdges = [e for e in G.edges(data=True) if e[2]['unifRv']<=p]
    crossing = find_crossing_path(openEdges, GAug)
    while lo <= hi:
        p = (lo+hi)/2
        
        openEdges = [e for e in G.edges(data=True) if e[2]['unifRv']<=p]
        crossing = len(find_crossing_path(openEdges, GAug))
        if crossing == 0:
            
            pAlt = p + 0.0001
            openEdgesAlt = [e for e in G.edges(data=True) if e[2]['unifRv']<=pAlt]
            crossingAlt = len(find_crossing_path(openEdgesAlt, GAug))
            if crossingAlt >0:
                return pAlt
            else:
                
                lo = pAlt    
        else:
            
            pAlt = p - 0.0001
            openEdgesAlt = [e for e in G.edges(data=True) if e[2]['unifRv']<=pAlt]
            crossingAlt = len(find_crossing_path(openEdgesAlt, GAug))
            if crossingAlt ==0:
                return p
            else:
                
                hi = pAlt
    print('something wrong')
    return None


import time

start_time = time.time()
thresholds = [find_threshold_binary_search(i) for i in range(1,1000)]
print(thresholds)
end_time = time.time()
print(f"It took {end_time-start_time:.2f} seconds to compute")

sim1 = [0.352003515625, 0.43504560546875004, 0.4076963867187501, 0.5152397460937499, 0.5713033203125, 0.47836713867187497, 0.43748750000000003, 0.43880844726562507, 0.4378537841796875, 0.5202456298828124, 0.5378493652343751, 0.46444833984375, 0.42586640625000005, 0.468499560546875, 0.484227685546875, 0.45458076171875006, 0.45687846679687505, 0.5473727539062501, 0.49853486328124996, 0.5024418945312501, 0.5112327148437501, 0.4920638427734375, 0.48972194824218757, 0.508158251953125, 0.45555751953125, 0.5193909667968749, 0.5068152099609375, 0.49521621093749996, 0.5201456298828124, 0.48080903320312496, 0.49169755859375, 0.508158251953125, 0.5108443359375001, 0.5096233886718751, 0.502297705078125, 0.50048837890625, 0.5151176513671873, 0.4834951171875, 0.4990011474609375, 0.4793438964843749, 0.5109885253906251, 0.529058544921875, 0.49951162109375, 0.49839067382812496, 0.479832275390625, 0.49511621093749997, 0.48559282226562506, 0.490576611328125, 0.47045307617187504, 0.46530300292968746, 0.48837890625, 0.5195351562499999, 0.4990232421875, 0.5192909667968749, 0.500732568359375, 0.5110885253906251, 0.5279375976562499, 0.498290673828125, 0.502053515625, 0.49668134765624994, 0.47509267578125003, 0.46811118164062504, 0.505716357421875, 0.48315092773437496, 0.5041291259765626, 0.499367431640625, 0.49511621093749997, 0.48007646484375, 0.4922859375, 0.502197705078125, 0.5058384521484376, 0.505616357421875, 0.48764633789062506, 0.49680344238281243, 0.499367431640625, 0.517925830078125, 0.503762841796875, 0.5012209472656249, 0.506204736328125, 0.49399526367187496, 0.508058251953125, 0.5210002929687498, 0.4865474853515625, 0.50439541015625, 0.49951162109375, 0.502053515625, 0.5049837890625, 0.4969255371093749, 0.4896219482421876, 0.47055307617187503, 0.515628125, 0.4833951171875, 0.502297705078125, 0.49277431640625, 0.49633715820312496, 0.49511621093749997, 0.49643715820312495, 0.52295380859375, 0.4969255371093749, 0.4894998535156251, 0.513774609375, 0.49179755859374996, 0.5013430419921874, 0.5024197998046875, 0.497313916015625, 0.50840244140625, 0.480320654296875, 0.49011032714843755, 0.5080361572265626, 0.5024418945312501, 0.5029302734375001, 0.5096233886718751, 0.5031744628906251, 0.5064489257812501, 0.5014651367187499, 0.49167546386718747, 0.4818078857421875, 0.5047616943359374, 0.5184363037109374, 0.49570458984375, 0.499755810546875, 0.5088908203125, 0.4991232421875, 0.5031523681640626, 0.508158251953125, 0.50439541015625, 0.5123315673828126, 0.504151220703125, 0.5024197998046875, 0.488623095703125, 0.5003662841796874, 0.5014651367187499, 0.49521621093749996, 0.49413945312499996, 0.48876728515625, 0.513530419921875, 0.4852265380859375, 0.5009767578125, 0.5030302734375001, 0.504739599609375, 0.49668134765624994, 0.5082803466796875, 0.505860546875, 0.5026639892578126, 0.5142629882812499, 0.49643715820312495, 0.4969476318359375, 0.5079140625, 0.4931626953125, 0.49961162109375, 0.4971918212890625, 0.5006104736328125, 0.5032965576171875, 0.505227978515625, 0.50048837890625, 0.5009546630859374, 0.4955824951171875, 0.5014651367187499, 0.48996613769531255, 0.4954824951171875, 0.508158251953125, 0.5029081787109375, 0.5012209472656249, 0.498046484375, 0.48559282226562506, 0.498290673828125, 0.5060826416015625, 0.49438364257812495, 0.4854486328125, 0.504251220703125, 0.49438364257812495, 0.502053515625, 0.50341865234375, 0.5001220947265625, 0.5015651367187499, 0.50927919921875, 0.493406884765625, 0.504639599609375, 0.49938952636718753, 0.5014430419921874, 0.500832568359375, 0.482518359375, 0.5029302734375001, 0.503274462890625, 0.499855810546875, 0.4969476318359375, 0.500344189453125, 0.49609296875, 0.5085245361328126, 0.4906987060546875, 0.508646630859375, 0.5026860839843751, 0.5029302734375001, 0.50840244140625, 0.505960546875, 0.50537216796875, 0.49365107421875, 0.500832568359375, 0.5014430419921874, 0.4989011474609375, 0.505716357421875, 0.49961162109375, 0.503274462890625, 0.502197705078125, 0.49169755859375, 0.48886728515625, 0.503662841796875, 0.504639599609375, 0.5024418945312501, 0.499855810546875, 0.49399526367187496, 0.5054721679687499, 0.499367431640625, 0.5015651367187499, 0.5015651367187499, 0.4958266845703125, 0.5073256835937501, 0.50449541015625, 0.495360400390625, 0.49926743164062504, 0.504151220703125, 0.4920638427734375, 0.5073256835937501, 0.497413916015625, 0.493506884765625, 0.4976802001953125, 0.497802294921875, 0.497313916015625, 0.502197705078125, 0.49863486328124995, 0.5054721679687499, 0.49194174804687496, 0.49658134765624995, 0.5019314208984376, 0.49755810546875, 0.501953515625, 0.5030302734375001, 0.4990232421875, 0.5117210937500001, 0.49423945312499995, 0.49877905273437495, 0.49755810546875, 0.502197705078125, 0.497413916015625, 0.5026860839843751, 0.5015872314453125, 0.497802294921875, 0.503762841796875, 0.5030302734375001, 0.5042733154296875, 0.5014430419921874, 0.5029302734375001, 0.49560458984375, 0.5029302734375001, 0.5027860839843751, 0.4991453369140625, 0.49853486328124996, 0.5073256835937501, 0.50048837890625, 0.500732568359375, 0.49755810546875, 0.497313916015625, 0.49755810546875, 0.5015651367187499, 0.495848779296875, 0.495848779296875, 0.499367431640625, 0.500344189453125, 0.493506884765625, 0.500832568359375, 0.499855810546875, 0.500832568359375, 0.49926743164062504, 0.493506884765625, 0.49450573730468744, 0.5026860839843751, 0.5031744628906251, 0.506204736328125, 0.49951162109375, 0.5084245361328126, 0.5012209472656249, 0.4970697265625, 0.50341865234375, 0.499755810546875, 0.50400703125, 0.49853486328124996, 0.4969255371093749, 0.5024418945312501, 0.5025418945312501, 0.5, 0.5028081787109375, 0.49521621093749996, 0.5025639892578126, 0.49423945312499995, 0.497902294921875, 0.5013209472656249, 0.49926743164062504, 0.509867578125, 0.49938952636718753, 0.4957266845703125, 0.5001, 0.4948720214843749, 0.50048837890625, 0.5031744628906251, 0.4977802001953125, 0.49277431640625, 0.5010767578124999, 0.498290673828125, 0.5010767578124999, 0.50390703125, 0.500244189453125, 0.4991232421875, 0.497413916015625, 0.49765810546875, 0.5031744628906251, 0.5030302734375001, 0.498290673828125, 0.5071814941406251, 0.49853486328124996, 0.50439541015625, 0.5064710205078127, 0.4957266845703125, 0.503762841796875, 0.49877905273437495, 0.5050058837890625, 0.4977802001953125, 0.495360400390625, 0.505127978515625, 0.49926743164062504, 0.499755810546875, 0.498146484375, 0.5025418945312501, 0.49655925292968744, 0.49682553710937494, 0.49755810546875, 0.493895263671875, 0.5018314208984376, 0.49387316894531247, 0.49570458984375, 0.49841276855468747, 0.502053515625, 0.50351865234375, 0.5015651367187499, 0.501709326171875, 0.492918505859375, 0.49765810546875, 0.49863486328124995, 0.5027860839843751, 0.49877905273437495, 0.5027860839843751, 0.5043733154296874, 0.501809326171875, 0.5019314208984376, 0.502053515625, 0.49841276855468747, 0.5026639892578126, 0.5064489257812501, 0.50351865234375, 0.5009767578125, 0.5010988525390625, 0.5014430419921874, 0.497413916015625, 0.4998779052734375, 0.49926743164062504, 0.500832568359375, 0.49865695800781246, 0.5010767578124999, 0.5042733154296875, 0.49887905273437494, 0.50058837890625, 0.5074256835937501, 0.49926743164062504, 0.5001220947265625, 0.4996337158203125, 0.49877905273437495, 0.502297705078125, 0.5030302734375001, 0.4991232421875, 0.5024418945312501, 0.501709326171875, 0.502297705078125, 0.5012209472656249, 0.503274462890625, 0.5014651367187499, 0.5074256835937501, 0.49682553710937494, 0.503662841796875, 0.5049837890625, 0.4954824951171875, 0.49839067382812496, 0.5063489257812501, 0.502053515625, 0.4969255371093749, 0.498046484375, 0.504639599609375, 0.499855810546875, 0.502197705078125, 0.502297705078125, 0.499855810546875, 0.4977802001953125, 0.49716972656249997, 0.5029302734375001, 0.49755810546875, 0.5026860839843751, 0.5025418945312501, 0.503762841796875, 0.50058837890625, 0.49450573730468744, 0.500344189453125, 0.504151220703125, 0.49951162109375, 0.5009767578125, 0.505716357421875, 0.503662841796875, 0.501809326171875, 0.5058384521484376, 0.49887905273437494, 0.4949720214843749, 0.49765810546875, 0.505860546875, 0.5010767578124999, 0.5001, 0.49887905273437494, 0.501709326171875, 0.499367431640625, 0.5025418945312501, 0.505227978515625, 0.499855810546875, 0.5024418945312501, 0.497413916015625, 0.502197705078125, 0.49609296875, 0.49938952636718753, 0.495848779296875, 0.4931406005859375, 0.5008546630859374, 0.5014651367187499, 0.5015651367187499, 0.4970697265625, 0.5069373046875001, 0.49853486328124996, 0.5024418945312501, 0.497802294921875, 0.49839067382812496, 0.500344189453125, 0.5013209472656249, 0.502197705078125, 0.5021756103515624, 0.49668134765624994, 0.5047616943359374, 0.5027860839843751, 0.501953515625, 0.49887905273437494, 0.497313916015625, 0.5, 0.49682553710937494, 0.4990232421875, 0.5031744628906251, 0.505127978515625, 0.49853486328124996, 0.49633715820312496, 0.49938952636718753, 0.5026860839843751, 0.49877905273437495, 0.49951162109375, 0.5069373046875001, 0.5026860839843751, 0.498146484375, 0.49450573730468744, 0.503274462890625, 0.5028081787109375, 0.495360400390625, 0.5014651367187499, 0.4959708740234375, 0.5031744628906251, 0.498290673828125, 0.499855810546875, 0.5, 0.5048837890625, 0.499755810546875, 0.5055942626953125, 0.4970697265625, 0.500244189453125, 0.49926743164062504, 0.50390703125, 0.5003662841796874, 0.497902294921875, 0.5012209472656249, 0.4996337158203125, 0.498146484375, 0.49609296875, 0.49716972656249997, 0.49951162109375, 0.49729182128906246, 0.50058837890625, 0.5029081787109375, 0.504739599609375, 0.49887905273437494, 0.497802294921875]
# plt.scatter(range(2,1000, 2),thresholds, s=2)
# plt.plot(np.linspace(0,1000,2),0.5*np.ones((2,)),'--r',linewidth=1)
# plt.axis([-20,1000,0.32,0.68])
# plt.xlabel('Box width')
# plt.ylabel('Crossing probability threshold')
# plt.title('Simulation of Crossing Threshold Probability of Boxes of width 1 to 1000')
# plt.show()